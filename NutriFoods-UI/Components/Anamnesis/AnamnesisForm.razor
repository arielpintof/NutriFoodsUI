@page "/anamnesis"
@page "/anamnesis/{PatientId:guid}/{ConsultationId:guid}"
@using MudExtensions.Enums
@using MudExtensions.Utilities
@using MudBlazor.Extensions
@using Fluxor
@using NutriFoods_UI.Data.Store.Anthropometry
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject IDispatcher Dispatcher

<MudStepper @ref="_stepper"
            Class="mud-width-full my-4 px-4"
            ContentStyle="min-height: 400px"
            Linear="false"
            Vertical="false"
            Color="_color"
            Variant="_variant"
            DisableAnimation="false"
            DisablePreviousButton="false"
            DisableNextButton="false"
            DisableSkipButton="true"
            DisableStepResultIndicator="_disableStepResultIndicator"
            HeaderBadgeView="HeaderBadgeView.All"
            HeaderTextView="HeaderTextView.All"
            PreventStepChangeAsync="new Func<StepChangeDirection, Task<bool>>(CheckChange)"
            LocalizedStrings="GetLocalizedStrings()"
            IconActionButtons="IconActionButtons"
            Loading="_loading"
            HeaderSize="_headerSize">

    <ChildContent>
        <MudStep Icon="@Icons.Material.Filled.LocalHospital"
                 Title="Clínica"
                 StatusChanged="StatusChanged">
            <ChildContent>

                <ClinicalCollapseGroup></ClinicalCollapseGroup>

            </ChildContent>
        </MudStep>

        <MudStep Title="Alimentaria"
                 Icon="@Icons.Custom.Uncategorized.FoodApple"
                 Optional="false">
            <ChildContent>
                <FoodHistoryCollapseGroup></FoodHistoryCollapseGroup>
            </ChildContent>
        </MudStep>

        <MudStep Title="Antropométrica"
                 Icon="@Icons.Material.Filled.BarChart"
                 Optional="false">
            <ChildContent>
                <AnthropometryForm></AnthropometryForm>
            </ChildContent>
        </MudStep>

        <MudStep Title="Recordatorio"
                 Icon="@Icons.Material.Filled.FoodBank"
                 Optional="false">
            <ChildContent>

            </ChildContent>
        </MudStep>


        @if (_addResultStep)
        {
            
            <MudStep Icon="@Icons.Material.Filled.Alarm" Title="Result Step" IsResultStep="true">
                <ChildContent>
                    <div class="d-flex flex-column align-center justify-center gap-2" style="height: 200px">
                        <MudIconButton Icon="@Icons.Material.Filled.DoneAll" Size="Size.Large" Variant="Variant.Filled" Color="Color.Success"/>
                        <MudText>La anamnesis ha sido completada con éxito</MudText>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   OnClick="@BackToConsultation"
                                   Style="text-transform: none; font-family: 'Plus Jakarta Sans', sans-serif; font-weight: 700;">
                            Volver a la consulta
                        </MudButton>
                    </div>
                </ChildContent>
            </MudStep>
        }
    </ChildContent>
    <ActionContent>
        @if (_stepper.IsAllStepsCompleted())
        {
        }
        <MudSpacer/>
    </ActionContent>


</MudStepper>


@code {

    [Parameter] public Guid PatientId { get; set; }

    [Parameter] public Guid ConsultationId { get; set; }

    private MudStepper _stepper = null!;

    private bool _checkValidationBeforeComplete = true;

    public bool IconActionButtons;

    private Variant _variant = Variant.Filled;

    private bool _disableStepResultIndicator = true;

    private bool _addResultStep = true;

    private bool _customLocalization = true;

    private Color _color = Color.Primary;

    bool _loading;

    private Size _headerSize = Size.Medium;

    private async Task<bool> CheckChange(StepChangeDirection direction)
    {
        if (_checkValidationBeforeComplete)
        {
            if (direction == StepChangeDirection.Backward)
            {
                return false;
            }

            if (_stepper.GetActiveIndex() == 0)
            {
                _loading = true;
                StateHasChanged();
                await Task.Delay(1000);
                _loading = false;
                StateHasChanged();

                return false;
            }
            else if (_stepper.GetActiveIndex() == 1)
            {
                _loading = true;
                StateHasChanged();
                await Task.Delay(1000);
                _loading = false;
                StateHasChanged();

                return false;
            }
            else if (_stepper.GetActiveIndex() == 2)
            {
                _loading = true;
                StateHasChanged();
                await Task.Delay(1000);
                _loading = false;
                StateHasChanged();

                return false;
            }
            else if (_stepper.GetActiveIndex() == 3)
            {
                _loading = true;
                StateHasChanged();
                await Task.Delay(1000);
                _loading = false;
                StateHasChanged();
                Submit();

                return false;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }


    private void StatusChanged(StepStatus status)
    {
        Snackbar.Add($"First step {status.ToDescriptionString()}.", Severity.Info);
    }

    private StepperLocalizedStrings GetLocalizedStrings()
    {
        if (_customLocalization == false)
        {
            return new StepperLocalizedStrings();
        }
        else
        {
            return new StepperLocalizedStrings()
            {
                Completed = "Completado",
                Finish = "Terminar",
                Next = "Siguiente",
                Optional = "Opcional",
                Previous = "Retroceder",
                Skip = "Omitir",
                Skipped = "Omitido",
            };
        }
    }

    void BackToConsultation()
    {
        Nav.NavigateTo($"/consultation/{PatientId}?anamnesiscompleted=true");
    }

    string Submit()
    {
        Dispatcher.Dispatch(new PostAnthropometryAction(ConsultationId, PatientId));
        Console.WriteLine("Por despachar...");
        Dispatcher.Dispatch(new PostAlimentaryAction(ConsultationId, PatientId));
        Console.WriteLine("Despachado...");
        Dispatcher.Dispatch(new PostClinicalAction(ConsultationId, PatientId));
        return "";
    }

}