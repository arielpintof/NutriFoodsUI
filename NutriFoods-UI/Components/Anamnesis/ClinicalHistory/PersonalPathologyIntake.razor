@using NutriFoods_UI.Data.Model
@using Fluxor
@using MudExtensions.Enums
@using NutriFoods_UI.Data.Dto
@using NutriFoods_UI.Data.Store.Pathologies
@using NutriFoods_UI.Utils.Enums
@inject IState<PersonalPathologiesState> PersonalPathologiesState
@inject IDispatcher Dispatcher
@inherits IntakeComponent

@page "/patologia"

<MudForm @ref="_form" @bind-IsValid="@IsValidHandler" Model="@PersonalPathology">
    <MudGrid>
        <MudItem md="12" xs="12">
            <div class="d-flex flex-row gap-3">
                <span class="align-self-center">@(Index + 1)</span>
                <MudSelectExtended ItemCollection="_diseases"
                                   SearchBox="true"
                                   SearchBoxAutoFocus="true"
                                   T="string"
                                   Label="Patología"
                                   AnchorOrigin="Origin.BottomCenter"
                                   Variant="Variant.Outlined"
                                   SearchBoxClearable="true"
                                   @bind-Value="PersonalPathology.Name"
                                   Margin="Margin.Dense"
                                   Required="true"/>
                <MudIconButton
                    OnClick="@Delete"
                    Icon="@Icons.Material.Filled.Delete"
                    Title="Eliminar patología"
                    Size="Size.Medium">
                    @Index
                </MudIconButton>
            </div>
        </MudItem>
    </MudGrid>
    
</MudForm>

@code {

    private DiseaseDto PersonalPathology => 
        Index < PersonalPathologiesState.Value.Pathologies.Count ? PersonalPathologiesState.Value.Pathologies.ElementAt(Index) : new DiseaseDto();

    private static List<string> InheritancesNames => IEnum<InheritanceTypes, InheritanceToken>
        .TokenDictionary
        .Select(e => e.Value.ReadableName)
        .Skip(1)
        .ToList();

    private string[] _diseases =
    {
        "Diabetes", "Hipertensión", "Asma", "Cancer"
    };

    private MudForm _form = new();

    protected override void Delete() => Dispatcher.Dispatch(new DeletePersonalPathologyAction(Index));

    protected override void Update()
    {
        var action = new ChangePersonalPathologyAction(Index, new DiseaseDto
        {
            Name = PersonalPathology.Name,
            InheritanceTypes = new List<string> { InheritanceTypes.Direct.ReadableName }
        });

        Dispatcher.Dispatch(action);
    }

}