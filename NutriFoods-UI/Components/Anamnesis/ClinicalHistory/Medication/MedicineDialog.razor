@using NutriFoods_UI.Data.Store.Medicines
@using NutriFoods_UI.Utils.Enums
@using static NutriFoods_UI.Utils.Enums.IEnum<NutriFoods_UI.Utils.Enums.IngestibleTypes, NutriFoods_UI.Utils.Enums.IngestibleToken>
@using Fluxor
@inject IDispatcher Dispatcher
@inject IState<MedicineState> MedicineState 
@inherits IngestibleDialog


<MudDialog Class="container px-3 py-3 ">
    <DialogContent>
        <h5 class="align-self-center fw-bold mb-3">
            @ModeType.ReadableName medicamento
        </h5>
        <MudDivider Class="my-2">
        </MudDivider>
        <MudForm @ref="IngestibleForm"
                 Class="mt-5"
                 Style="color: var(--grey-light)"
                 Model="IngestibleModel"
                 Validation="IngestibleValidator.ValidateValue">
            <MudGrid>
                <MudItem md="12" sm="12" xs="12">
                    <div class="d-flex align-content-center">
                        <MudTextField T="string"
                                      InputType="InputType.Text"
                                      Placeholder="Nombre del medicamento"
                                      Label="Nombre"
                                      Variant="Variant.Outlined"
                                      @bind-Value="IngestibleModel.Name"
                                      For="@(() => IngestibleModel.Name)"
                                      Margin="Margin.Dense"
                                      Required="true"/>
                    </div>
                </MudItem>

                <MudItem md="6" sm="6" xs="12">
                    <MudNumericField @bind-Value="IngestibleModel.Dosage"
                                     For="@(() => IngestibleModel.Dosage)"
                                     Label="Dosis"
                                     Placeholder="Cantidad de la dosis"
                                     Margin="Margin.Dense"
                                     Variant="Variant.Outlined"
                                     Required="true"/>
                </MudItem>

                <MudItem md="6" sm="6" xs="12">
                    <MudSelect T="string"
                               Placeholder="Unidad de medida"
                               Label="Unidad"
                               Variant="Variant.Outlined"
                               AnchorOrigin="Origin.BottomCenter"
                               @bind-Value="IngestibleModel.Unit"
                               Margin="Margin.Dense"
                               Required="true">
                        @foreach (var unit in UnitsCollection)
                        {
                            <MudSelectItem Value="@unit.ReadableName">@unit.ReadableName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem md="12" sm="12" xs="12">
                    <MudSelect @bind-Value="IngestibleModel.Adherence"
                               For="@(() => IngestibleModel.Adherence)"
                               T="string"
                               Label="Adherencia"
                               Placeholder="Frecuencia de consumo"
                               AnchorOrigin="Origin.BottomCenter"
                               Margin="Margin.Dense"
                               Variant="Variant.Outlined"
                               Required="true">
                        @foreach (var freq in FrequenciesCollection)
                        {
                            <MudSelectItem Value="@freq.ReadableName">@freq.ReadableName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                @foreach (var time in IngestibleModel.AdministrationTimes.Select((value, index) => new { Value = value, Index = index }))
                {
                    <MudItem md="4" sm="6" xs="12">
                        <MudTimePicker @bind-Time="IngestibleModel.AdministrationTimes[time.Index]"
                                       Variant="Variant.Outlined"
                                       Margin="Margin.Dense"
                                       Editable="true"
                                       Placeholder="Hora"
                                       AmPm="true"
                                       Label="Hora"
                                       TimeFormat="hh:mm"
                                       Required="true">
                        </MudTimePicker>
                    </MudItem>
                }
                <div class="d-flex flex-wrap">
                    <MudButton
                        Size="Size.Small"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Outlined.AddCircle"
                        IconSize="Size.Medium"
                        Variant="Variant.Text"
                        Style="text-transform: none; font-family: 'Plus Jakarta Sans', sans-serif; font-weight: 700;"
                        OnClick="AddAdministrationTime">
                    </MudButton>
                </div>

                <MudItem Class="d-flex gap-3" md="12" sm="12" xs="12">
                    <MudTextField T="string"
                                  InputType="InputType.Text"
                                  @bind-Value="IngestibleModel.Observations"
                                  Label="Observaciones"
                                  Placeholder="Máximo 255 caracteres"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"/>
                </MudItem>
            </MudGrid>
        </MudForm>
        <div class="d-flex gap-2 pt-6">
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       OnClick="@Submit">
                Guardar medicamento
            </MudButton>
            <MudButton Variant="Variant.Text"
                       OnClick="() => MudDialogInstance.Cancel()">
                Cancelar
            </MudButton>
        </div>
    </DialogContent>
</MudDialog>

@code {

    protected override Task OnInitializedAsync()
    {
        if (ModeType == ModeTypeEnum.Edit)
        {
            IngestibleModel = MedicineState.Value.Medicines.ElementAt(Index);
        }

        if (ModeType == ModeTypeEnum.Add)
        {
            IngestibleModel.AdministrationTimes.Add(new TimeOnly().ToTimeSpan());
        }
    
        return base.OnInitializedAsync();
    }


    private async Task Submit()
    {
        await IngestibleForm.Validate();

        if (!IngestibleForm.IsValid) return;

        IngestibleModel.Type = ToReadableName(IngestibleToken.Pharmaceutical);

        if (ModeType == ModeTypeEnum.Add)
        {
            Dispatcher.Dispatch(new AddMedicineAction(IngestibleModel));
        }
        else
        {
            Dispatcher.Dispatch(new ChangeMedicineAction(Index, IngestibleModel));
        }


        MudDialogInstance.Close(DialogResult.Ok(true));
    }


}