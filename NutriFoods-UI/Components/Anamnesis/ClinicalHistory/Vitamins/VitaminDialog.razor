@using NutriFoods_UI.Data.Model
@using NutriFoods_UI.Data.Store.Vitamins  
@using NutriFoods_UI.Utils.Enums
@using Fluxor
@inject IDispatcher Dispatcher
@inject IState<VitaminState> VitaminState  


<MudDialog Class="container px-3 py-3 ">
    <DialogContent>
        <h5 class="align-self-center fw-bold mb-3">
            @ModeType.ReadableName suplemento  <!-- Cambiado de "suplemento" a "Vitamina" -->
        </h5>
        <MudDivider Class="my-2"></MudDivider>
        <MudForm Class="mt-5" Style="color: var(--grey-light)" Model="IngestibleModel">
            <MudGrid>
                <!-- ... (resto del código sin cambios) ... -->
            </MudGrid>
        </MudForm>
        <div class="d-flex gap-2 pt-6">
            <MudButton
                Color="Color.Primary"
                Variant="Variant.Filled"
                OnClick="Submit">
                Guardar medicamento
            </MudButton>
            <MudButton
                Variant="Variant.Text"
                OnClick="() => MudDialogInstance.Cancel()">
                Cancelar
            </MudButton>
        </div>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialogInstance { get; set; } = null!;

    Ingestible IngestibleModel { get; set; } = new();
    
    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public ModeTypeEnum ModeType { get; set; } = null!;
    
    protected override Task OnInitializedAsync()
    {
        if (ModeType == ModeTypeEnum.Edit && VitaminState.Value.Vitamins != null)
        {
            IngestibleModel = VitaminState.Value.Vitamins.ElementAt(Index);
        }
        
        return base.OnInitializedAsync();
    }

    private void Submit()
    {
        IngestibleModel.Type = IngestibleTypes.Vitamin;  <!-- Cambiado de Supplement a Vitamin -->
        Dispatcher.Dispatch(new AddVitaminAction(IngestibleModel));  <!-- Cambiado de AddSupplementAction a AddVitaminAction -->
        MudDialogInstance.Close(DialogResult.Ok(true));
    }


    private void AddAdministrationTime()
    {
        IngestibleModel.AdministrationTimes.Add(new TimeSpan());
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        IngestibleModel.AdministrationTimes.Add(new TimeSpan());
        base.OnInitialized();
    }
    

    static IEnumerable<Frequencies> Adherence => IEnum<Frequencies, FrequencyToken>
        .TokenDictionary()
        .Select(e => e.Value)
        .Skip(1)
        .ToList();

}