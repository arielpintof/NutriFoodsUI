@using Fluxor
@using NutriFoods_UI.Data.Dto
@using NutriFoods_UI.Data.Store.ClinicalSigns
@inject IState<ClinicalSignState> ClinicalSignState
@inherits IntakeComponent
@inject IDispatcher Dispatcher

<MudForm @bind-IsValid="@IsValidHandler" Model="@ClinicalSignModel">
    <MudGrid>
        <MudItem md="4" sm="6" xs="12">
            <div class="d-flex gap-3">
                <span class="align-self-center">@(Index + 1)</span>
                <MudTextField @bind-Value="ClinicalSignModel.Name"
                              Label="Nombre"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Required="true">
                </MudTextField>
            </div>

        </MudItem>
        <MudItem md="8" sm="4" xs="12">

            <div class="d-flex gap-3">
                <MudTextField @bind-Value="@ClinicalSignModel.Observations"
                              Label="Observación (Opcional)"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Required="true"/>

                <MudIconButton OnClick="Delete"
                               Icon="@Icons.Material.Filled.DeleteForever"
                               Title="Eliminar signo clínico"
                               Size="Size.Medium">
                    @Index
                </MudIconButton>
            </div>


        </MudItem>
    </MudGrid>
</MudForm>


@code {

    private ClinicalSignDto ClinicalSignModel => Index < ClinicalSignState.Value.ClinicalSigns.Count() ?
        ClinicalSignState.Value.ClinicalSigns.ElementAt(Index) :
        new ClinicalSignDto();
    
    protected override void Delete() => Dispatcher.Dispatch(new DeleteClinicalSignAction(Index));
    
    protected override void Update()
    {
        var action = new ChangeClinicalSignAction(new ClinicalSignDto
        {
            Name = ClinicalSignModel.Name,
            Observations = ClinicalSignModel.Observations
        }, Index);

        Dispatcher.Dispatch(action);
    }

}