@using NutriFoods_UI.Data.Dto
@using Fluxor
@using NutriFoods_UI.Data.Model
@using NutriFoods_UI.Data.Store.Pathologies
@inject IDispatcher Dispatcher
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<PersonalPathologiesState> PersonalState

<MudGrid Class="px-3">
    <MudItem xs="4" Class="d-flex flex-column gap-2">
        <div class="d-flex align-items-center">
            <CollapseSubtitle Title="Patologías directas"></CollapseSubtitle>
        </div>
    </MudItem>
    <MudItem xs="8">
        <MudStack Class="mb-5">
            
            @if (PersonalState.Value.Initialized)
            {
                for (var i = 0; i < PersonalState.Value.Pathologies.Count(); i++)
                {
                    <div class="d-flex flex-column">
                        <PersonalPathologyIntake Index="i"></PersonalPathologyIntake>
                    </div>
                }
            }
            
            <div class="mb-2">
                <MudButton
                    Size="Size.Small"
                    Color="Color.Primary"
                    StartIcon="@Icons.Material.Outlined.AddCircle"
                    Variant="Variant.Text"
                    OnClick="@AddPathology"
                    Style="text-transform: none; font-family: 'Plus Jakarta Sans', sans-serif; font-weight: 700;">
                    Añadir una patología
                </MudButton>
            </div>
        </MudStack>
    </MudItem>
</MudGrid>

@code {

    protected override Task OnInitializedAsync()
    {
        if (PersonalState.Value.Initialized != false) return base.OnInitializedAsync();
        Dispatcher.Dispatch(new InitializePersonalPathologiesAction());
        return base.OnInitializedAsync();
    }

    private void AddPathology()
    {
        Dispatcher.Dispatch(new AddPersonalPathologyAction(new DiseaseDto()));
    }

}

<style>
    .mud-chip.mud-chip-size-small
    {
        font-family: Plus Jakarta Sans, serif;
        font-size: 10px;
        height: 18px;
    }
    
</style>


