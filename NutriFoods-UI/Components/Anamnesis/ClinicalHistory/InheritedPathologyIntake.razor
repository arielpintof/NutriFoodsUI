@using NutriFoods_UI.Data.Model
@using NutriFoods_UI.Utils.Enums
@using MudExtensions.Enums
@using System.Collections.Immutable
@using Fluxor
@using NutriFoods_UI.Data.Dto
@using NutriFoods_UI.Data.Store.Pathologies
@inherits IntakeComponent
@inject IDispatcher Dispatcher

<MudForm Model="Pathology" @bind-IsValid="@IsValidHandler">
    <div class="d-flex mb-3 flex-wrap flex-column flex-sm-row gap-3">
        <span class="align-self-center">@(Index + 1)</span>
        <MudSelectExtended
            ItemCollection="_diseases"
            SearchBox="true"
            SearchBoxAutoFocus="true"
            T="string"
            Label="Selecciona una patología"
            AnchorOrigin="Origin.BottomCenter"
            Variant="Variant.Outlined"
            SearchBoxClearable="true"
            @bind-Value="Pathology.Name"
            Margin="Margin.Dense"
            Required="true"
            Class="flex-grow-1"/>

        <MudComboBox
            T="string"
            Label="Herencia"
            AnchorOrigin="Origin.BottomCenter"
            Variant="Variant.Outlined"
            SearchBoxClearable="true"
            MultiSelection="true"
            @bind-SelectedValues="Pathology.InheritanceTypes"
            Margin="Margin.Dense"
            Required="true"
            InputPresenter="ValuePresenter.Text">
            <ChildContent>
                @foreach (var item in InheritancesNames)
                {
                    <MudComboBoxItem Value="@item" Text="@item"></MudComboBoxItem>
                }
            </ChildContent>
        </MudComboBox>

        <MudIconButton
            Icon="@Icons.Material.Filled.Delete"
            Title="Eliminar patología"
            Size="Size.Medium"
            OnClick="@Delete">
            @Index
        </MudIconButton>

    </div>

</MudForm>

@code {
    private DiseaseDto Pathology { get; set; } = new();

    private static IEnumerable<string> InheritancesNames => IEnum<InheritanceTypes, InheritanceToken>
        .TokenDictionary
        .Select(e => e.Value.ReadableName)
        .Skip(2)
        .ToList();
    

    private string[] _diseases =
    {
        "Diabetes", "Hipertensión", "Asma", "Cancer"
    };

    protected override void Delete() => Dispatcher.Dispatch(new DeleteInheritedPathologyAction(Index));
    
    protected override void Update()
    {
        var action = new ChangeInheritedPathologyAction(Index, new DiseaseDto
        {
            Name = Pathology.Name,
            InheritanceTypes = Pathology.InheritanceTypes,
        });

        Dispatcher.Dispatch(action);
    }

}