@using NutriFoods_UI.Services
@using NutriFoods_UI.Data
@using NutriFoods_UI.Data.Dto
@using Fluxor
@using Newtonsoft.Json
@using NutriFoods_UI.Data.Store.DailyPlanList
@using NutriFoods_UI.Utils.Enums
@inject NavigationManager Nav
@inject IPatientService PatientService
@inject IState<DailyPlanState> DailyPlanState 

<MudPaper Class="d-flex flex-column px-10 py-5 gap-4" Elevation="0" MaxWidth="900px">
    @if (true)
    {
        <MudGrid>
            <MudItem md="6">
                <div class="subtitle">
                    <h3>Anamnesis</h3>
                    <p>Incluye anamnesis clínica, alimentaria y antropométrica</p>
                </div>
            </MudItem>
            <MudItem md="6">
                <div>
                    @if (Consultation.NutritionalAnamnesis != null && Consultation.NutritionalAnamnesis.EatingSymptoms != null)
                    {
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   OnClick="@NavToAnamnesis"
                                   Style="text-transform: none; font-family: 'Plus Jakarta Sans', sans-serif; font-weight: 700;"
                                   Disabled="true">
                            Anamnesis completada
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   OnClick="@NavToAnamnesis"
                                   Style="text-transform: none; font-family: 'Plus Jakarta Sans', sans-serif; font-weight: 700;"
                                   Disabled="!Enable">
                            Iniciar Anamnesis
                        </MudButton>
                    }

                </div>
            </MudItem>
        </MudGrid>

        <MudDivider Class="mt-5"></MudDivider>


        <MudGrid>
            <MudItem md="6">
                <div class="subtitle">
                    <h3>Plan alimenticio</h3>
                    <p>Puedes crear más de uno, para distintos días de la semana</p>
                </div>
            </MudItem>
            <MudItem md="6">
                @foreach (var plan in DailyPlanState.Value.DailyPlans)
                {
                    <span>Plan para el día @plan.Day</span>
                }
                <div>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Primary"
                               Href="/generate/mealplan"
                               Style="text-transform: none; font-family: 'Plus Jakarta Sans', sans-serif; font-weight: 700;"
                               Disabled="!IsAnamnesisCompleted">
                        Generar un plan alimenticio
                    </MudButton>

                    <MudTooltip Text="Debes completar la anamnesis antes de generar un plan"
                                Placement="Placement.Top">
                        <MudIcon Icon="@Icons.Material.Outlined.Info" Size="Size.Medium" Color="Color.Info"></MudIcon>
                    </MudTooltip>

                </div>
            </MudItem>
        </MudGrid>


        <MudItem md="6" Class="mt-5">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="@NavToUserProfile"
                       DisableElevation="true"
                       Style="text-transform: none; font-family: 'Plus Jakarta Sans', sans-serif; font-weight: 700;">
                Finalizar consulta
            </MudButton>
        </MudItem>
    }


</MudPaper>

@code {

    [Parameter] public Guid PatientId { get; set; }

    [Parameter] public Guid NutritionistId { get; set; }

    [Parameter] public bool? MealCompleted { get; set; } = new bool();

    [Parameter] public bool? AnamnesisCompleted { get; set; } = new bool();

    ConsultationDto Consultation { get; set; } = new();

    string Type { get; set; } = string.Empty;

    string Purpose { get; set; } = string.Empty;

    bool Enable { get; set; }

    MudForm Form { get; set; } = new();

    async Task IsValid()
    {
        await Form.Validate();
        if (Form.IsValid)
        {
            await CreateConsultation();
            Enable = true;
        }
    }

    async Task CreateConsultation()
    {
        try
        {
            var response = await PatientService.CreateConsultation(PatientId, new ConsultationDto
            {
                Type = Type,
                Purpose = Purpose,
                DailyPlans = []
            });
            
            var content = await response.Content.ReadFromJsonAsync<ConsultationDto>();
            if (content != null)
            {
                Consultation = content;
            }
        }

        catch (HttpRequestException e)
        {
            Console.WriteLine(e.Message);
        }
        
    }

    bool IsAnamnesisCompleted => AnamnesisCompleted != null;

    static ICollection<ConsultationTypes> ConsultationTypesCollection => IEnum<ConsultationTypes, ConsultationTypeToken>
        .TokenDictionary.Select(e => e.Value)
        .Skip(1).ToList();

    static ICollection<ConsultationPurposes> ConsultationPurposesCollection => IEnum<ConsultationPurposes, ConsultationPurposeToken>
        .TokenDictionary.Select(e => e.Value)
        .Skip(1).ToList();

    void NavToUserProfile()
    {
        Nav.NavigateTo($"/patients/profile/{PatientId}");
    }

    void NavToAnamnesis()
    {
        Nav.NavigateTo($"/anamnesis/{PatientId}/{Consultation.Id}");
    }

}