<div class="d-flex align-center gap-3">
    <MudSelect bind-Value="@SelectedComida" T="string" Label="Comida del día" AnchorOrigin="Origin.BottomCenter" 
               @Oninput="() => HandleComidaSelected(SelectedComida)">
        <MudSelectItem Value="@("Desayuno")"/>
        <MudSelectItem Value="@("Almuerzo")"/>
        <MudSelectItem Value="@("Cena")"/>
        <MudSelectItem Value="@("Merienda")"/>
    </MudSelect>

    <MudSelect bind-Value="@SelectedHora" T="string" Label="Hora" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem Value="@("A.M")"/>
        <MudSelectItem Value="@("P.M")"/>
    </MudSelect>

    <MudSlider Size="Size.Medium" Value="@SliderValue" @oninput="() => HandleSliderValueChanged(SliderValue, Index)" />
</div>

@code{

    public int Value { get; set; }
    
    [Parameter]
    public string BindValue { get; set; } = null!;
    
    private string SelectedComida { get; set; }
    
    private string SelectedHora { get; set; }
    
    private int SliderValue { get; set; }
    
    [Parameter]
    public EventCallback<string> OnComidaSelected { get; set; }

    [Parameter]
    public EventCallback<int> OnSliderValueChanged { get; set; }

    private async Task HandleComidaSelected(string selectedValue)
    {
        await OnComidaSelected.InvokeAsync(selectedValue);
    }

    private async Task HandleSliderValueChanged(int sliderValue, Index index)
    {
        await OnSliderValueChanged.InvokeAsync(sliderValue);
    }
    
    [Parameter] public int Index { get; set; }

}