@page "/generate/mealplan"
@page "/generate/mealplan/{PatientId:guid}/{ConsultationId:guid}"

@inject ISnackbar Snackbar
@using MudExtensions.Enums
@using MudExtensions.Utilities
@using Fluxor
@using MudBlazor.Extensions
@using NutriFoods_UI.Data.Store.DailyMeal
@using NutriFoods_UI.Data.Store.DailyPlanList
@using NutriFoods_UI.Data.Store.MicronutrientConfiguration
@using NutriFoods_UI.Data.Store.TotalMetabolicRate
@inject IState<MicronutrientState> MicroNutrientState;
@inject IState<DailyMealState> DailyMealState
@inject IDispatcher Dispatcher
@inject IState<DaysState> DayState
@inject IState<TmrState> TmrState
@inject NavigationManager Nav
@inherits Fluxor.Blazor.Web.Components.FluxorComponent


<MudStepper @ref="_stepper"
            Class="mud-width-full"
            ContentStyle="min-height: 400px"
            Linear="true"
            Vertical="false"
            Color="_color"
            Variant="Variant.Filled"
            DisableAnimation="false"
            DisablePreviousButton="false"
            DisableNextButton="false"
            DisableSkipButton="true"
            DisableStepResultIndicator="DisableStepResultIndicator"
            HeaderBadgeView="HeaderBadgeView.All"
            HeaderTextView="HeaderTextView.All"
            PreventStepChangeAsync="new Func<StepChangeDirection, Task<bool>>(CheckChange)"
            LocalizedStrings="GetLocalizedStrings()"
            IconActionButtons="false"
            Loading="_loading"
            HeaderSize="Size.Medium">

    <ChildContent>

        <MudStep Icon="@Icons.Material.Filled.Whatshot"
                 Title="Energía calórica"
                 StatusChanged="StatusChanged">
            <ChildContent>
                <CaloriesConfiguration></CaloriesConfiguration>
            </ChildContent>
        </MudStep>

        <MudStep Icon="@Icons.Material.Filled.Settings"
                 Title="Configuración"
                 StatusChanged="StatusChanged">
            <ChildContent>
                <ConfigurationGroup></ConfigurationGroup>
            </ChildContent>
        </MudStep>

        <MudStep Title="Plan alimenticio"
                 Icon="@Icons.Material.Filled.FoodBank"
                 Optional="false">
            <ChildContent>
                @if (_stepper.GetActiveIndex() == 2)
                {
                    <DailyMeal ActiveIndex="_stepper.GetActiveIndex() == 2"></DailyMeal>
                }

            </ChildContent>
        </MudStep>


        @if (AddResultStep)
        {
            <MudStep Icon="@Icons.Material.Filled.Alarm" Title="Result Step" IsResultStep="true">
                <ChildContent>
                    <div class="d-flex flex-column align-center justify-center" style="height: 200px">
                        <MudIconButton Icon="@Icons.Material.Filled.DoneAll" Size="Size.Large" Variant="Variant.Filled" Color="Color.Success"/>
                        <MudText>El plan alimenticio ha sido guardado</MudText>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   OnClick="@NavToConsultation"
                                   Style="text-transform: none; font-family: 'Plus Jakarta Sans', sans-serif; font-weight: 700;">
                            Volver a la consulta
                        </MudButton>
                    </div>
                </ChildContent>
            </MudStep>
        }
    </ChildContent>
    <ActionContent >
        @if (!_stepper.IsAllStepsCompleted() && ShowCustomButton)
        {
            <MudButton Color="Color.Secondary"
                       Variant="Variant.Filled"
                       OnClick="@(() => Snackbar.Add("Custom cancel button clicked.", Severity.Info))">
                Cancel
            </MudButton>
        }
        <MudSpacer/>
    </ActionContent>


</MudStepper>


@code {
    MudStepper _stepper = new();
    MudForm _form = new();
    MudForm _form2 = new();
    private bool _checkValidationBeforeComplete = true;
    private const bool DisableStepResultIndicator = false;
    private const bool AddResultStep = true;
    bool _customLocalization = true;
    Color _color = Color.Primary;
    bool _loading;
    private const bool ShowCustomButton = false;


    private async Task<bool> CheckChange(StepChangeDirection direction)
    {
        if (_checkValidationBeforeComplete)
        {
            // Always allow stepping backwards, even if forms are invalid
            if (direction == StepChangeDirection.Backward)
            {
                return false;
            }

            if (_stepper.GetActiveIndex() == 0)
            {
                _loading = true;
                StateHasChanged();
                await Task.Delay(1000);
                var isValid = DayState.Value.IsValid && TmrState.Value.IsValid;
                _loading = false;
                StateHasChanged();

                return !isValid;
            }
            else if (_stepper.GetActiveIndex() == 2)
            {
                _stepper.DisableSkipButton = true;
                _loading = true;
                StateHasChanged();
                await Task.Delay(1000);
                await _form2.Validate();
                _loading = false;
                StateHasChanged();
                Submit();
                return !_form2.IsValid;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }


    private void StatusChanged(StepStatus status)
    {
        Snackbar.Add($"First step {status.ToDescriptionString()}.", Severity.Info);
    }

    private StepperLocalizedStrings GetLocalizedStrings()
    {
        if (_customLocalization == false)
        {
            return new StepperLocalizedStrings();
        }
        else
        {
            return new StepperLocalizedStrings()
            {
                Completed = "Completado",
                Finish = "Terminar",
                Next = "Siguiente",
                Optional = "Opcional",
                Previous = "Retroceder",
                Skip = "Omitir",
                Skipped = "Omitido",
            };
        }
    }

    [Parameter] public Guid PatientId { get; set; }

    [Parameter] public Guid ConsultationId { get; set; }

    void Submit() => Dispatcher.Dispatch(new AddDailyPlanAction(DailyMealState.Value.DailyPlan));

    void NavToConsultation() => Nav.NavigateTo($"/patient/{PatientId}/consultation/{ConsultationId}");


}