@using NutriFoods_UI.Utils.Enums
@using NutriFoods_UI.Data.Model
@using NutriFoods_UI.Data.Store.TotalMetabolicRate
@using Fluxor
@using NutriFoods_UI.Data.Dto
@using NutriFoods_UI.Data.Store.LatestConsultation
@using NutriFoods_UI.Services
@using NutriFoods_UI.Utils.Date
@inject IState<TmrState> TmrState
@inject IState<LatestConsultationState> LatestConsultation
@inject IDispatcher Dispatcher
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IPatientService PatientService


<MudForm Model="TmrConfigurationModel" @bind-IsValid="@IsValidHandler" Class="px-3 mb-5" @ref="Form">
    <MudGrid>
        <MudItem xs="12" sm="12" md="4">
            <CollapseSubtitle Title="Actividad física"/>
        </MudItem>

        <MudItem xs="12" sm="12" md="3" Class="align-items-center">
            <MudSelect Margin="Margin.Dense"
                       Label="Actividad física"
                       Variant="Variant.Outlined"
                       @bind-Value="PhysicalActivityHandler"
                       T="PhysicalActivities"
                       Required="true" >
                @foreach (var physicalActivity in PhysicalActivitiesCollection)
                {
                    <MudSelectItem Value="physicalActivity">@physicalActivity.ReadableName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="12" md="5" Class="align-content-center">
            <MudNumericField HideSpinButtons="false"
                             @bind-Value="@ValueHandler"
                             Label="Factor recomendado"
                             Variant="Variant.Outlined"
                             Margin="Margin.Dense"
                             Min="0.0"
                             Step="0.1"
                             Required="true"
                             Class="rounded"
                             AdornmentColor="Color.Primary"/>
        </MudItem>

        <MudItem xs="12" sm="12" md="4">
            <CollapseSubtitle Title="Factor de ajuste"/>
        </MudItem>

        <MudItem xs="12" sm="12" md="8" Class="align-items-center">
            <MudNumericField HideSpinButtons="false"
                             @bind-Value="@TmrConfigurationModel.Factor"
                             Label="Cifra"
                             Variant="Variant.Outlined"
                             Margin="Margin.Dense"
                             Min="0.0"
                             Required="true"
                             Adornment="Adornment.End"
                             AdornmentColor="Color.Primary"
                             T="double"/>
        </MudItem>
        <MudDivider></MudDivider>
        <MudItem xs="12" sm="12" md="4">
            <CollapseSubtitle Title="Energía total recomendada"/>
        </MudItem>
        <MudItem xs="12" sm="12" md="8" Class="align-items-center">
            @if (!TmrState.Value.TmrConfiguration.PhysicalActivityLevel.Equals(string.Empty))
            {
                <span>@((int)TmrState.Value.GetTmr) kcal</span>
            }
        </MudItem>
    </MudGrid>
</MudForm>



@code {
    [Parameter] public Guid PatientId { get; set; }
    
    private TmrConfiguration TmrConfigurationModel => TmrState.Value.TmrConfiguration;
    
    MudForm Form { get; set; } = new();
    
    ICollection<PhysicalActivities> PhysicalActivitiesCollection => IEnum<PhysicalActivities, PhysicalActivityToken>
        .TokenDictionary
        .Select(e => e.Value)
        .Skip(1)
        .ToList();

    PhysicalActivities? _physicalActivity;

    public bool IsValid;

    private bool IsValidHandler
    {
        get => IsValid;
        set
        {
            if (IsValid == value) return;
            IsValid = value;
            Console.WriteLine("Validez");
            UpdateTmr();
            StateHasChanged();
        }
    }

    private void UpdateTmr()
    {
        var consultation = LatestConsultation.Value.LatestConsultation;
        var weight = consultation.Anthropometry?.Weight ?? 90; 
        var height = consultation.Anthropometry?.Height ?? 180; 
        var action = new ChangeTmrAction(new TmrConfiguration()
        {
            Bmr = TmrConfigurationModel.Bmr,
            BiologicalSex = BiologicalSexes,
            Age = Age,
            Weight = weight,
            Height = height,
            Multiplier = ValueHandler,
            Factor = TmrConfigurationModel.Factor,
            PhysicalActivityLevel = PhysicalActivityHandler!.ReadableName
        });
        Form.Validate();
       
        Dispatcher.Dispatch(action);
        Dispatcher.Dispatch(new TmrValidationAction(Form.IsValid));
    }

    private PhysicalActivities? PhysicalActivityHandler
    {
        get => _physicalActivity;
        set
        {
            if (_physicalActivity == value) return;
            _physicalActivity = value;
            MapEnumToSliderValue();
            UpdateTmr();
        }
    }

    double _value;

    private double ValueHandler
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            UpdateTmr();
        }
    }

    double _upperValue;

    private double UpperValueHandler
    {
        get => _upperValue;
        set
        {
            if (_upperValue == value) return;
            _upperValue = value;
        }
    }

    private void MapEnumToSliderValue()
    {
        UpperValueHandler = _physicalActivity.UpperRatio;
        ValueHandler = _physicalActivity.LowerRatio;
        StateHasChanged();
        UpdateTmr();
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await PatientService.FindPatient(PatientId);
        var content = await response.Content.ReadFromJsonAsync<PatientDto>();

        BiologicalSexes = content != null ? IEnum<BiologicalSexes, BiologicalSexToken>.ToValue(content.PersonalInfo.BiologicalSex) : BiologicalSexes.Male;
        if (content is { PersonalInfo: not null })
        {
            Age = DateOnlyUtils.CalculateAge(content.PersonalInfo.Birthdate);
        }
        else
        {
            Age = 20;
        }
        base.OnInitialized();
    }

    BiologicalSexes BiologicalSexes { get; set; } = null!;
    int Age { get; set; }


}

<style>
    .mud-slider>.mud-typography {
        margin-top: 0;
    }
    
    .mud-range-container {
        align-items: center;
        margin: 0 0;
    }
</style>