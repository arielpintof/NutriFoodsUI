@page "/macro"
@using NutriFoods_UI.Data.Enums
@using Fluxor
@using NutriFoods_UI.Data.Dto
@using NutriFoods_UI.Data.Store
@using NutriFoods_UI.Data.Store.CurrentPatient
@using NutriFoods_UI.Data.Store.TotalMetabolicRate
@using NutriFoods_UI.Pages
@using NutriFoods_UI.Services
@using NutriFoods_UI.Utils.Enums
@using NutriFoods_UI.Utils.Strings
@inject IState<PatientState> CurrentPatient
@inject IPatientService PatientService
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using static NutriFoods_UI.Utils.Enums.IEnum<NutriFoods_UI.Utils.Enums.Nutrients, NutriFoods_UI.Utils.Enums.NutrientToken>
@inject IState<TmrState> TmrState


<div class="d-flex justify-space-between">
    <div class="d-flex flex-column gap-1" style="width: 30%">
        <span>@MacroNutrient.ReadableName</span>
        <p>Distribución porcentual de @MacroNutrient.AlternativeName</p>
    </div>
    <div class="d-flex gap-3 mx-1 align-end mb-1" style="width: 50%">
        <div class="d-flex flex-column mud-width-full">
            <div class="d-flex gap-1">
                <label class="form-label">Distribución</label>
                <MudChip Color="@Color.Primary"
                         Size="Size.Small"
                         Variant="Variant.Text"
                         Style="font-family: 'Plus Jakarta Sans', sans-serif;font-weight: 700">
                    @($"{GramsKg:F1} g/Kg")
                </MudChip>
            </div>

            <MudSlider Size="Size.Medium" @bind-Value="MacroValue" ValueLabel="true"
                       Variant="Variant.Filled" Min="0" Max="100" Step="1"
                       Class="mt-2 ">
            </MudSlider>
        </div>
        <div class="d-flex gap-1 align-items-center">
            <input class="custom form-control " type="number" min="1" max="100" step="1"
                   @bind="MacroValue" inputmode="numeric">
            <label class="form-label">%</label>
        </div>

    </div>
</div>


@code {

    [Parameter] public Nutrients MacroNutrient { get; set; } = null!;

    private double GramsKg { get; set; }

    private double ToGrams() => MacroNutrient.ToGrams(TmrState.Value.GetTmr * MacroValue * 0.01, PatientWeight);

    private double _macroValue;
    
    public double MacroValue
    {
        get => _macroValue;
        set
        {
            _macroValue = value;
            var action = new ChangeMoleculaAction(_macroValue, MacroNutrient);
            Dispatcher.Dispatch(action);
            GramsKg = ToGrams();
            StateHasChanged();
        }
    }

    [Inject] private IState<MoleculaState> MoleculeState { get; set; } = null!;

    [Inject] public IDispatcher Dispatcher { get; set; } = null!;

    [Parameter] public double PatientWeight { get; set; }
    
    [Parameter] public double InitialMacroValue { get; set; }

    protected override void OnInitialized()
    {
        MacroValue = InitialMacroValue;
        base.OnInitialized();
    }


}


<style>
    
</style>