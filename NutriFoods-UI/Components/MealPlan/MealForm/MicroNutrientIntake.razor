@using Fluxor
@using Microsoft.Extensions.Options
@using MudExtensions.Enums
@using NutriFoods_UI.Data.Dto
@using NutriFoods_UI.Data.Store.MicronutrientConfiguration
@using NutriFoods_UI.Utils.Enums
@using System.Collections.Immutable
@inject IState<MicronutrientState> MicroNutrientState
@inject IDispatcher Dispatcher


<MudForm id="@NutrientModel.Id" @ref="_form" @bind-IsValid="@IsValidHandler" Model="@NutrientModel">
    <div class="d-flex mb-3 flex-wrap flex-column flex-sm-row gap-3">

        <span class="align-self-center">@(Index + 1)</span>
        <MudSelectExtended
            ItemCollection="_nutrients"
            SearchBox="true"
            SearchBoxAutoFocus="true"
            T="string"
            Label="Nutriente"
            AnchorOrigin="Origin.BottomCenter"
            Variant="Variant.Outlined"
            SearchBoxClearable="true"
            @bind-Value="NutrientModel.Name"
            Margin="Margin.Dense"
            Required="true"
            Class="flex-grow-1"/>


        <div style="flex-basis: 30%;">
            <MudNumericField
                HideSpinButtons="false"
                @bind-Value="@NutrientModel.Quantity"
                Label="Cantidad"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                Min="0.0"
                Required="true"
                Class="rounded"
                Adornment="Adornment.End"
                AdornmentColor="Color.Primary"
                AdornmentText="@GetMeasure()"/>
        </div>
        
        <MudSelectExtended
            ItemCollection="Thresholds"
            SearchBoxAutoFocus="true"
            T="string"
            Label="Límite"
            AnchorOrigin="Origin.BottomCenter"
            Variant="Variant.Outlined"
            SearchBoxClearable="true"
            Margin="Margin.Dense"
            Required="true"
            Class="flex-grow-1"/>
        
        <MudIconButton
            OnClick="DeleteNutrient"
            Icon="@Icons.Material.Filled.DeleteForever"
            Title="Eliminar nutriente"
            Size="Size.Medium">
            @Index
        </MudIconButton>
        
        


    </div>

</MudForm>


@code {

    private MicroNutrientDto NutrientModel => Index < MicroNutrientState.Value.Micronutrients.Count() ? 
            MicroNutrientState.Value.Micronutrients.ElementAt(Index) : 
            new MicroNutrientDto();

    private static ICollection<string> Thresholds => IEnum<Threshold, ThresholdToken>
        .ReadableNameDictionary()
        .Select(e => e.Key)
        .Skip(1).ToImmutableList();

    protected override void OnInitialized()
    {
        Console.WriteLine($"Index {Index} actualizado");
        base.OnInitialized();
    }

    MudForm _form = null!;

    [Parameter]
    public int Index { get; set; }

    public bool IsValid;

    private bool IsValidHandler
    {
        get => IsValid;
        set
        {
            if (IsValid == value) return;
            IsValid = value;
            UpdateMicronutrient();
        }
    }

    private IEnumerable<UnitEnum?> UnitEnumValues() => UnitEnum.NonNullValues;

    private static List<MicroNutrientDto> Nutrients => new()
    {
        new MicroNutrientDto { Name = "Sodio", Measure = UnitEnum.Milligrams },
        new MicroNutrientDto { Name = "Calcio", Measure = UnitEnum.Milligrams },
        new MicroNutrientDto { Name = "Azúcar Total", Measure = UnitEnum.Grams },
        new MicroNutrientDto { Name = "Vitamina B12", Measure = UnitEnum.Micrograms }
    };

    private string?[] _nutrients = Nutrients.Select(nutrient => nutrient.Name).ToArray();

    private void DeleteNutrient() => Dispatcher.Dispatch(new DeleteMicronutrientAction(Index));

    private void UpdateMicronutrient()
    {
        var action = new ChangeMicronutrientAction(Index, new MicroNutrientDto
        {
            Measure = NutrientModel.Measure,
            Name = NutrientModel.Name,
            Quantity = NutrientModel.Quantity,
            IsValid = IsValid
        });

        Dispatcher.Dispatch(action);
    }


    private string GetMeasure()
    {
        if (NutrientModel.Name == string.Empty) return string.Empty;
        var nutrientName = NutrientModel.Name;
        var selectedNutrient = Nutrients.FirstOrDefault(n => n.Name == nutrientName);
        if (selectedNutrient != null)
        {
            NutrientModel.Measure = selectedNutrient.Measure;
        }

        return NutrientModel.Measure.ReadableName;
    }

}