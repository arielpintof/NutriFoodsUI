@using Fluxor
@using Microsoft.Extensions.Options
@using MudExtensions.Enums
@using NutriFoods_UI.Data.Dto
@using NutriFoods_UI.Data.Store.MicronutrientConfiguration
@using NutriFoods_UI.Utils.Enums
@inject IState<MicronutrientState> MicroNutrientState
@inject IDispatcher Dispatcher
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudForm id="@NutrientModel.Id" @ref="_form" @bind-IsValid="@IsValidHandler" Model="@NutrientModel">
    <div class="d-flex mb-3 flex-wrap flex-column flex-sm-row gap-3 align-items-center">
        <span>@(Index + 1)</span>
        <MudSelectExtended
            ItemCollection="_nutrients"
            SearchBox="true"
            SearchBoxAutoFocus="true"
            T="string"
            Label="Nutriente"
            AnchorOrigin="Origin.BottomCenter"
            Variant="Variant.Outlined"
            SearchBoxClearable="true"
            @bind-Value="NutrientModel.Name"
            Margin="Margin.Dense"
            Class="flex-grow-1"
            Validation="@NutrientModel.Name"/>
        
        <div style="flex-basis: 20%;">
            <MudNumericField
                HideSpinButtons="true"
                @bind-Value="@NutrientModel.Quantity"
                Label="Cantidad"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                Min="0.0"
                Required="true"
                Class="rounded"/>
        </div>
         
        <MudComboBox
            @bind-Value="@NutrientModel.Measure"
            Variant="Variant.Outlined"
            Label="Unidad de medida"
            Dense="Dense.Standard"
            Margin="Margin.Dense"
            Style="flex-basis: 30% !important;">
            @foreach (var units in UnitEnumValues())
            {
                <MudComboBoxItem
                    Value="@units"
                    Text="@units.ReadableName">
                    @units.ReadableName
                </MudComboBoxItem>
            }
        </MudComboBox>
        
        <MudIconButton
            OnClick="DeleteNutrient"
            Icon="@Icons.Material.Outlined.Delete"
            Title="Eliminar nutriente"
            Size="Size.Small">
            @Index
        </MudIconButton>
        
    </div>

    <ValidationSummary/>
</MudForm>

<span>@IsValid</span>
<span>Name:@NutrientModel.Name</span>
<span>Quantity:@NutrientModel.Quantity</span>
<span>Measure:@NutrientModel.Measure</span>


@code {
    private string sub { get; set; } = string.Empty;
    private MicroNutrientDto NutrientModel => MicroNutrientState.Value.Micronutrients.ElementAt(Index);
    MudForm _form = null!;
    [Parameter]
    public int Index { get; set; }

    public bool IsValid;
    
    private bool IsValidHandler
    {
        get => IsValid;
        set
        {
            if (IsValid == value) return;
            IsValid = value;
            UpdateMicronutrient();
        }
    }
    
    private IEnumerable<UnitEnum?> UnitEnumValues() => UnitEnum.NonNullValues;
    
    private string[] _nutrients =
    {
        "Sodio", "Azúcar total", "Potasio", "Vitamina C",
    };

    private void DeleteNutrient()
    {
        Console.WriteLine(Index);
        Dispatcher.Dispatch(new DeleteMicronutrientAction(Index));
    }

    private void UpdateMicronutrient()
    {
        Console.WriteLine("State actualizado");
        var action = new ChangeMicronutrientAction(Index, new MicroNutrientDto
        {
            Measure = NutrientModel.Measure,
            Name = NutrientModel.Name,
            Quantity = NutrientModel.Quantity,
            IsValid = IsValid
        });

        Dispatcher.Dispatch(action);
    }

}