@using Fluxor
@using Microsoft.Extensions.Options
@using MudExtensions.Enums
@using NutriFoods_UI.Data.Dto
@using NutriFoods_UI.Data.Store.MicronutrientConfiguration
@using NutriFoods_UI.Utils.Enums
@using System.Collections.Immutable
@inject IState<MicronutrientState> MicroNutrientState
@inject IDispatcher Dispatcher

<div class="nutrient-container">
    <MudForm @ref="_form"
             @bind-IsValid="@IsValidHandler"
             Model="@NutrientModel"
             Class="hover-container">
        <MudGrid>
            <MudItem md="5" sm="4" xs="12">
                <div class="d-flex gap-3">
                    <span class="align-self-center">@(Index + 1)</span>
                    <MudSelectExtended ItemCollection="NutrientsCollection"
                                       SearchBox="true"
                                       SearchBoxAutoFocus="true"
                                       T="string"
                                       Label="Nutriente"
                                       AnchorOrigin="Origin.BottomCenter"
                                       Variant="Variant.Outlined"
                                       SearchBoxClearable="true"
                                       @bind-Value="NutrientModel.Nutrient"
                                       Margin="Margin.Dense"
                                       Required="true"
                                       Class="flex-grow-1"/>
                </div>

            </MudItem>
            <MudItem md="2" sm="4" xs="12">
                <MudNumericField HideSpinButtons="false"
                                 @bind-Value="@NutrientModel.ExpectedQuantity"
                                 Label="Cantidad"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 Min="0.0"
                                 Required="true"
                                 Class="rounded"
                                 Adornment="Adornment.End"
                                 AdornmentColor="Color.Primary"
                                 AdornmentText="@GetMeasure()"/>

            </MudItem>
            <MudItem md="5" sm="6" xs="12">
                <div class="d-flex flex-row gap-3">
                    <MudSelect T="string"
                               Label="Límite"
                               AnchorOrigin="Origin.BottomCenter"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense"
                               Required="true"
                               Class="flex-grow-1"
                               @bind-Value="@NutrientModel.ThresholdType">
                        @foreach (var threshold in Thresholds)
                        {
                            <MudSelectItem Value="@threshold"></MudSelectItem>
                        }

                    </MudSelect>

                    <div class="delete-button">
                        <MudIconButton
                            OnClick="@DeleteNutrient"
                            Icon="@Icons.Material.Filled.Delete"
                            Title="Eliminar nutriente"
                            Size="Size.Medium">
                            @Index
                        </MudIconButton>
                    </div>


                </div>

            </MudItem>
        </MudGrid>

    </MudForm>

</div>


@code {


    private NutritionalTargetDto NutrientModel => Index < MicroNutrientState.Value.Micronutrients.Count() ? MicroNutrientState.Value.Micronutrients.ElementAt(Index) : new NutritionalTargetDto();

    private static ICollection<string> Thresholds => IEnum<ThresholdTypes, ThresholdToken>
        .TokenDictionary
        .Select(e => e.Value.ReadableName)
        .Skip(1)
        .ToList();

    protected override void OnInitialized()
    {
        Console.WriteLine($"Index {Index} actualizado");
        base.OnInitialized();
    }

    MudForm _form = null!;

    [Parameter] public int Index { get; set; }


    private bool _isValid;

    private bool IsValidHandler
    {
        get => _isValid;
        set
        {
            _isValid = value;
            UpdateMicronutrient();
        }
    }

    private IEnumerable<Units> UnitEnumValues() => IEnum<Units, UnitToken>
        .TokenDictionary
        .Select(e => e.Value)
        .Skip(1)
        .ToList();

    private static List<string> NutrientsCollection =>
        IEnum<Nutrients, NutrientToken>.TokenDictionary
            .Where(e => e.Value.IsTotal == false || e.Key == NutrientToken.Other)
            .Select(n => n.Value.ReadableName)
            .Skip(1)
            .ToList();


    private void DeleteNutrient() => Dispatcher.Dispatch(new DeleteMicronutrientAction(Index));

    private void UpdateMicronutrient()
    {
        var action = new ChangeMicronutrientAction(Index, new NutritionalTargetDto
        {
            Nutrient = NutrientModel.Nutrient,
            ExpectedQuantity = NutrientModel.ExpectedQuantity,
            ThresholdType = NutrientModel.ThresholdType,
            Unit = GetMeasure(),
            IsPriority = true,
            ExpectedError = 0.1
        });

        Dispatcher.Dispatch(action);
    }

    private string GetMeasure() => NutrientModel.Nutrient == null ? "" : IEnum<Nutrients, NutrientToken>.ToValue(NutrientModel.Nutrient).Unit.ReadableName;

}