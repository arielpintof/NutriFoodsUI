@using Fluxor
@using MudExtensions.Enums
@using NutriFoods_UI.Data.Dto
@using NutriFoods_UI.Data.Store.MicronutrientConfiguration
@using NutriFoods_UI.Utils.Enums
@inject IState<MicronutrientState> MicroNutrientState
@inject IDispatcher Dispatcher
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div class="d-flex flex-wrap flex-column flex-sm-row gap-3 align-items-center">
    <span>@(Index+1)</span>
    <MudSelectExtended 
        ItemCollection="_states" 
        SearchBox="true"
        SearchBoxAutoFocus="true"
        T="string" 
        Label="Nutriente"
        AnchorOrigin="Origin.BottomCenter"
        Variant="Variant.Outlined"
        SearchBoxClearable="true"
        @bind-Value="NameHandler"
        Margin="Margin.Dense"
        Class="flex-grow-1"
    />
    <div style="flex-basis: 20%;">
        <MudNumericField 
            HideSpinButtons="true"
            @bind-Value="@QuantityHandler"
            Label="Cantidad"
            Variant="Variant.Outlined"
            Margin="Margin.Dense"
            Min="0.0"
        />
    </div>

    <MudComboBox 
        @bind-Value="@UnitHandler"
        Variant="Variant.Outlined"
        Label="Unidad de medida"
        Dense="Dense.Standard"
        Margin="Margin.Dense"
        Style="flex-basis: 30% !important;"
    >
        @foreach (var units in UnitEnumValues())
        {
            <MudComboBoxItem 
                Value="@units"
                Text="@units.ReadableName"
            >
                @units.ReadableName
            </MudComboBoxItem>
        }
    </MudComboBox>
    <MudIconButton 
        OnClick="DeleteNutrient" 
        Icon="@Icons.Material.Outlined.Delete" 
        Title="Eliminar nutriente"
    >
        @Index
    </MudIconButton>
</div>


@code {

    [Parameter]
    public int Index { get; set; }
    
    private IEnumerable<UnitEnum?> UnitEnumValues() => UnitEnum.NonNullValues;

    private string[] _states =
    {
        "Sodio", "Azúcar total", "Potasio", "Vitamina C",
    };

    private void DeleteNutrient()
    {
        Console.WriteLine(Index);
        Dispatcher.Dispatch(new DeleteMicronutrientAction(Index));
    }

    protected override void OnParametersSet()
    {
        _name = MicroNutrientState.Value.Micronutrients.ElementAt(Index).Name;
        _unit = MicroNutrientState.Value.Micronutrients.ElementAt(Index).Measure;
        _quantity = MicroNutrientState.Value.Micronutrients.ElementAt(Index).Quantity;
        
        Console.WriteLine($"Nutriente {Index}: {_name}, {_quantity}, {_unit}");
        base.OnParametersSet();
    }

    

    private string _name = string.Empty;

    private string NameHandler
    {
        get => _name;
        set
        {
            if (_name == value) return;
            _name = value;
            UpdateMicronutrient();
        }
    }

    private UnitEnum _unit = UnitEnum.None;

    private UnitEnum UnitHandler
    {
        get => _unit;
        set
        {
            if (_unit == value) return;
            _unit = value;
            UpdateMicronutrient();
        }
    }

    private double? _quantity;

    private double? QuantityHandler
    {
        get => _quantity;
        set
        {
            if (_quantity == value) return;
            _quantity = value;
            UpdateMicronutrient();
        }
    }

    private void UpdateMicronutrient()
    {
        var action = new ChangeMicronutrientAction(Index, new MicroNutrientDto
        {
            Measure = UnitHandler,
            Name = NameHandler,
            Quantity = QuantityHandler
        });
        
        Dispatcher.Dispatch(action);
    }

}